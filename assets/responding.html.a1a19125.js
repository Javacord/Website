import{_ as t,r as e,o,c as p,a as c,b as i,w as u,e as s,d as n}from"./app.151ccb98.js";var l="/assets/respond_with_modal.9601f2a7.png";const r={},d=s(`<h1 id="responding-to-interactions" tabindex="-1"><a class="header-anchor" href="#responding-to-interactions" aria-hidden="true">#</a> Responding to interactions</h1><p>There are many ways to respond to interactions and some are only available for certain interactions. The following will be usable for every interaction.</p><h2 id="responding-immediately-after-receiving-an-interaction" tabindex="-1"><a class="header-anchor" href="#responding-immediately-after-receiving-an-interaction" aria-hidden="true">#</a> \u{1F4AC} Responding immediately after receiving an interaction.</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>event<span class="token punctuation">.</span><span class="token function">getInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">createImmediateResponder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;YOUR_RESPONSE&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">INFO</p><p>Note that you have to respond withing 3 seconds, or the command will fail. If you need longer than 3 seconds you have to respond with <code>respondLater()</code> which allows you to respond within 15 minutes.</p><p>Because of this time limitation, sending any files when creating an immediate response is not possible. If you want a file to be embedded either use <code>respondLater</code> or include a web link in the message content. Depending on the media type of the link and the server configuration, Discord will then display an appropriate embed for the file.</p></div><p>When you want to respond ephemerally, you can use the <code>setFlags</code> method. Your new responder would look like the following:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>event<span class="token punctuation">.</span><span class="token function">getInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">createImmediateResponder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;YOUR_RESPONSE&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token class-name">MessageFlag</span><span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="responding-after-some-time-when-receiving-an-interaction" tabindex="-1"><a class="header-anchor" href="#responding-after-some-time-when-receiving-an-interaction" aria-hidden="true">#</a> \u{1F4AC} Responding after some time when receiving an interaction.</h2><p>If your computations takes longer than the 3 seconds limit, you can respond later and the Discord Client will show that your bot is thinking until you respond.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>event<span class="token punctuation">.</span><span class="token function">getInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">respondLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>interactionOriginalResponseUpdater <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            interactionOriginalResponseUpdater<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;Update message after some time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can respond ephemerally when responding later too. For that you have pass a <code>true</code> boolean to the <code>respondLater</code> method.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>event<span class="token punctuation">.</span><span class="token function">getInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">respondLater</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>interactionOriginalResponseUpdater <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            interactionOriginalResponseUpdater<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;Update message after some time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sending-followup-messages" tabindex="-1"><a class="header-anchor" href="#sending-followup-messages" aria-hidden="true">#</a> Sending followup messages</h3><p>Followup messages can be sent within 15 minutes after the command has been invoked. You can send as many followup messages as you want.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>api<span class="token punctuation">.</span><span class="token function">addSlashCommandCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">SlashCommandInteraction</span> slashCommandInteraction <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getSlashCommandInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    slashCommandInteraction<span class="token punctuation">.</span><span class="token function">respondLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>interactionOriginalResponseUpdater <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        interactionOriginalResponseUpdater<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;You will receive the answer in a few minutes!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// time &lt; 15 minutes</span>
        
        slashCommandInteraction<span class="token punctuation">.</span><span class="token function">createFollowupMessageBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;Thank you for your patience, it took a while but the answer to the universe is 42&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="responding-with-a-modal" tabindex="-1"><a class="header-anchor" href="#responding-with-a-modal" aria-hidden="true">#</a> Responding with a Modal</h2><p>A modal is a popup dialog which can be shown when responding to an interaction. It focuses the users to explicitly fill out this form to continue with the workflow. Currently, only the <code>TextInput</code> (<code>SelectMenu</code> has been seen working too, but is not yet officially supported) is supported.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>api<span class="token punctuation">.</span><span class="token function">addMessageComponentCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">getInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">respondWithModal</span><span class="token punctuation">(</span><span class="token string">&quot;modalId&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Modal Title&quot;</span><span class="token punctuation">,</span>
        <span class="token class-name">ActionRow</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">TextInput</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">TextInputStyle</span><span class="token punctuation">.</span>SHORT<span class="token punctuation">,</span> <span class="token string">&quot;text_input_id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;This is a Text Input Field&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Which results in</p><p><img src="`+l+`" alt="Modal"></p><h2 id="slashcommand-interaction-only-response-methods" tabindex="-1"><a class="header-anchor" href="#slashcommand-interaction-only-response-methods" aria-hidden="true">#</a> \u{1F4AC} SlashCommand interaction only response methods</h2><h3 id="how-to-know-what-slash-command-was-invoked" tabindex="-1"><a class="header-anchor" href="#how-to-know-what-slash-command-was-invoked" aria-hidden="true">#</a> How to know what slash command was invoked?</h3><p>For example, you have created a slash command with the name &quot;settings&quot; and a subcommand &quot;color&quot;. If you want to check if exactly this command has been used, you can check it as follows:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>api<span class="token punctuation">.</span><span class="token function">addSlashCommandCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">SlashCommandInteraction</span> interaction <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getSlashCommandInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span><span class="token function">getFullCommandName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;settings color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Code if command matches the full name</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="respond-to-an-autocomplete-interaction-triggered-from-a-slashcommand" tabindex="-1"><a class="header-anchor" href="#respond-to-an-autocomplete-interaction-triggered-from-a-slashcommand" aria-hidden="true">#</a> Respond to an AutoComplete interaction triggered from a SlashCommand</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>api<span class="token punctuation">.</span><span class="token function">addAutocompleteCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">getAutocompleteInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">respondWithChoices</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
        <span class="token class-name">SlashCommandOptionChoice</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">SlashCommandOptionChoice</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="message-component-interaction-only-response-methods" tabindex="-1"><a class="header-anchor" href="#message-component-interaction-only-response-methods" aria-hidden="true">#</a> \u{1F4AC} Message Component interaction only response methods</h2><p>When dealing with message components, you don&#39;t necessarily have to respond or update a message. You can simply acknowledge the interaction and let the user know that the task is done.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>api<span class="token punctuation">.</span><span class="token function">addMessageComponentCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    event<span class="token punctuation">.</span><span class="token function">getMessageComponentInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="a-more-complete-example-of-how-to-respond-to-component-interactions" tabindex="-1"><a class="header-anchor" href="#a-more-complete-example-of-how-to-respond-to-component-interactions" aria-hidden="true">#</a> A more complete example of how to respond to Component interactions</h3>`,30),k=n("The following code snipped shows how you can respond to the example created in "),m=n("Components"),v=n("."),h=s(`<div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>api<span class="token punctuation">.</span><span class="token function">addMessageComponentCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">MessageComponentInteraction</span> messageComponentInteraction <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getMessageComponentInteraction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> customId <span class="token operator">=</span> messageComponentInteraction<span class="token punctuation">.</span><span class="token function">getCustomId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>customId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;success&quot;</span><span class="token operator">:</span>
            messageComponentInteraction<span class="token punctuation">.</span><span class="token function">createImmediateResponder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;You clicked a button!&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;danger&quot;</span><span class="token operator">:</span>
            messageComponentInteraction<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;secondary&quot;</span><span class="token operator">:</span>
            messageComponentInteraction<span class="token punctuation">.</span><span class="token function">respondLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>interactionOriginalResponseUpdater <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">//Code to respond after 5 minutes</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;options&quot;</span><span class="token operator">:</span>
            messageComponentInteraction<span class="token punctuation">.</span><span class="token function">createImmediateResponder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;You selected an option in a select menu!&quot;</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function g(b,f){const a=e("RouterLink");return o(),p("div",null,[d,c("p",null,[k,i(a,{to:"/wiki/basic-tutorials/interactions/components.html"},{default:u(()=>[m]),_:1}),v]),h])}var y=t(r,[["render",g],["__file","responding.html.vue"]]);export{y as default};
