import{_ as o,r as i,o as p,c,a as n,b as t,w as e,d as s,e as u}from"./app.151ccb98.js";var l="/assets/ping-pong-white.53343497.gif";const r={},d=n("h1",{id:"writing-your-first-bot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#writing-your-first-bot","aria-hidden":"true"},"#"),s(" Writing your first bot")],-1),k=n("p",null,"After you have successfully added Javacord as a dependency, created a bot user, and got its token, you are now ready to create your first simple bot! \u{1F389}",-1),v=n("h2",{id:"enabling-required-intents",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enabling-required-intents","aria-hidden":"true"},"#"),s(" \u2757 Enabling required intents")],-1),m=s("By default, all non-privileged intents are enabled. To receive the message content, attachments, components, and embeds you need a special privileged intent "),g=n("code",null,"MESSAGE_CONTENT",-1),h=s(". To enable this privileged intent please see the "),b=s("Gateway Intents"),f=s(" wiki article."),y={class:"custom-container tip"},_=n("p",{class:"custom-container-title"},"Slash Commands",-1),w=s("Generally it is recommended to use "),q=s("Slash Commands"),x=s(" instead of text commands because they offer many advantages like auto-completion, fixed and optional arguments, different kind of arguments with built-in types: numbers(with ranges), text, channel and a lot more."),C=u(`<h2 id="log-the-bot-in" tabindex="-1"><a class="header-anchor" href="#log-the-bot-in" aria-hidden="true">#</a> \u{1F511} Log the bot in</h2><p>Everything starts with the <code>DiscordApiBuilder</code> class. It is used to create a <code>DiscordApi</code> object which is the most important class of your bot.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">DiscordApi</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscordApiBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;your super secret token&gt;&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addIntents</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>MESSAGE_CONTENT<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After executing this code, you should already see your bot online in Discord. Of course, just being online is not enough, so let&#39;s add some more code!</p><h2 id="adding-a-listener" tabindex="-1"><a class="header-anchor" href="#adding-a-listener" aria-hidden="true">#</a> \u{1F442} Adding a listener</h2><p>After you got your <code>api</code> instance, let&#39;s continue by adding a listener that answers every <code>!ping</code> message with a simple <code>Pong!</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>api<span class="token punctuation">.</span><span class="token function">addMessageCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getMessageContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;!ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        event<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Pong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt=""></p><h2 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="#putting-it-all-together" aria-hidden="true">#</a> \u{1F469}\u200D\u{1F527} Putting it all together</h2><p>A good place for your code is the <code>main(...)</code> method that every executable Java program must have. Your complete class may look like this:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstBot</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Log the bot in</span>
        <span class="token class-name">DiscordApi</span> api <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscordApiBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;your super secret token&gt;&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addIntents</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>MESSAGE_CONTENT<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Add a listener which answers with &quot;Pong!&quot; if someone writes &quot;!ping&quot;</span>
        api<span class="token punctuation">.</span><span class="token function">addMessageCreateListener</span><span class="token punctuation">(</span>event <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getMessageContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;!ping&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                event<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Pong!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Congratulations, that&#39;s already everything you have to know for the beginning. Now, you can play around a little bit by exploring other listeners and methods. Or you just continue reading articles in the <em>Basic Tutorials</em> category.</p>`,12);function A(j,E){const a=i("RouterLink");return p(),c("div",null,[d,k,v,n("p",null,[m,g,h,t(a,{to:"/wiki/basic-tutorials/gateway-intents.html#privileged-intents"},{default:e(()=>[b]),_:1}),f]),n("div",y,[_,n("p",null,[w,t(a,{to:"/wiki/basic-tutorials/interactions/commands.html"},{default:e(()=>[q]),_:1}),x])]),C])}var N=o(r,[["render",A],["__file","writing-your-first-bot.html.vue"]]);export{N as default};
