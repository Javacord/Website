import{_ as c,r as e,o as i,c as u,a as s,b as a,w as l,d as n,e as o}from"./app.151ccb98.js";const r={},k=s("h1",{id:"completable-futures",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#completable-futures","aria-hidden":"true"},"#"),n(" Completable Futures")],-1),d={class:"custom-container warning"},m=s("p",{class:"custom-container-title"},"WARNING",-1),h=n("This tutorial assumes that you are familiar with lambda expressions. Take a look at the "),v=n("lambda introduction"),g=n(" first, if you are not!"),f=n("As Javacord is heavily multithreaded, you must understand the concept of "),b={href:"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html",target:"_blank",rel:"noopener noreferrer"},w=n("Futures"),y=n(" in general, as well as their most common implementation, the "),_={href:"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html",target:"_blank",rel:"noopener noreferrer"},x=n("CompletableFuture"),q=n(". This little introduction gives you a quick overview of the basics you need to know in order to work with Futures."),T=o(`<h2 id="what-the-heck-is-a-future" tabindex="-1"><a class="header-anchor" href="#what-the-heck-is-a-future" aria-hidden="true">#</a> \u{1F914} What the heck is a future?</h2><p>A future is basically a wrapper, that will contain a value in the future but might not contain it right now. This is useful, if a method call requires some time and should not block the execution of your current code. You can easily see the difference with a primitive speed comparison:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Prints &quot;4 ms&quot;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Test 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Prints &quot;894 ms&quot;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> currentTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>join()</code> blocks the current thread until the method finished. This will be explained later.</p></div><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> \u{1F4D6} Methods</h2><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> join()</h3><p>The <code>join</code> method blocks the current thread until the method finished. It returns the method&#39;s result or throws a <code>CompletionException</code> if anything failed.</p><p>The following example would create a new text channel in a given <code>server</code> and sends a message directly afterwards.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Create the channel</span>
<span class="token class-name">ServerTextChannel</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerTextChannelBuilder</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;new-channel&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Send a message in the new channel</span>
<span class="token class-name">Message</span> message <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;First!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Adds an reaction to the message. Even though this method doesn&#39;t return anything,</span>
<span class="token comment">// join() ensures, that an exception is thrown in case something went wrong</span>
message<span class="token punctuation">.</span><span class="token function">addReaction</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F44D}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>You should avoid <code>join()</code> for methods which will be called frequently.</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>While <code>join()</code> can become a performance issue when you call it very frequently, it is very convenient to use and easy to understand. If you are new to programming and just want to get your first bot working, this is a good method to start with.</p><p>Once you gathered more experience, we highly advise against using <code>join</code> as it negatively impacts your bot&#39;s performance!</p></div><h3 id="thenaccept" tabindex="-1"><a class="header-anchor" href="#thenaccept" aria-hidden="true">#</a> thenAccept(...)</h3><p>The <code>thenAccept</code> method accepts a <code>Consumer</code>, that consumes the result of the method and is executed asynchronously. It is the method you usually want to use most of the time.</p><p>The following example would create a new text channel in a given <code>server</code> and send a message directly afterwards.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ServerTextChannelBuilder</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;new-channel&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>channel <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;First!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>message <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            message<span class="token punctuation">.</span><span class="token function">addReaction</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F44D}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>The example code above has a major problem: Any exception that might occur will be completely ignored. This makes it very hard to find bugs.</p><p>For example, if your bot doesn&#39;t have the permissions to create a new channel, it will just fail silently.</p></div><h3 id="exceptionally" tabindex="-1"><a class="header-anchor" href="#exceptionally" aria-hidden="true">#</a> exceptionally(...)</h3><p>The <code>exceptionally</code> method accepts a <code>Function</code> as parameter, which consumes possible exceptions and returns a fallback value.</p><p>The following example would create a new text channel in a given <code>server</code> and send a message directly afterwards. If something fails (e.g., if the bot isn&#39;t allowed to create a text channel in the server), it will log an exception.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ServerTextChannelBuilder</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;new-channel&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>channel <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;First!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>message <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            message<span class="token punctuation">.</span><span class="token function">addReaction</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F44D}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Adding the reaction failed</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Message sending failed</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Channel creation failed    </span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Wow! This looks ugly \u{1F92E}. But worry not! There are many options to improve this code!</p><p>To make things simpler for you, Javacord has the <code>ExceptionLogger</code> class, which can be used here. It logs every exception you didn&#39;t catch manually.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ServerTextChannelBuilder</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;new-channel&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>channel <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;First!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>message <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            message<span class="token punctuation">.</span><span class="token function">addReaction</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F44D}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token class-name">ExceptionLogger</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token class-name">ExceptionLogger</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token class-name">ExceptionLogger</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Okay! This is at least a little better, but still not really perfect \u{1F914}.</p><h3 id="thencompose" tabindex="-1"><a class="header-anchor" href="#thencompose" aria-hidden="true">#</a> thenCompose()</h3>`,26),j=n("The "),C=s("code",null,"thenCompose",-1),F=n(" methods allows you to chain futures. It takes a "),M={href:"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html",target:"_blank",rel:"noopener noreferrer"},S=n("Function"),A=n(" as parameter, that consumes the future's value and expects a new future to be returned."),N=o(`<p>The example to create a text channel can now be written like this:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ServerTextChannelBuilder</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;new-channel&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>channel <span class="token operator">-&gt;</span> channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;First!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>message <span class="token operator">-&gt;</span> message<span class="token punctuation">.</span><span class="token function">addReaction</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F44D}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token class-name">ExceptionLogger</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally \u{1F389}! Now we only need a single <code>exceptionally(...)</code> call at the end. We also got rid of the nested callbacks (usually referred to as &quot;callback hell&quot;).</p><p>For better understanding, here&#39;s the example with comments that tell you the type at each line:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ServerTextChannelBuilder</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token comment">// ServerTextChannelBuilder</span>
        <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;new-channel&quot;</span><span class="token punctuation">)</span> <span class="token comment">// ServerTextChannelBuilder</span>
        <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// CompletableFuture&lt;ServerTextChannel&gt;</span>
        <span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>channel <span class="token operator">-&gt;</span> channel<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">&quot;First!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// CompletableFuture&lt;Message&gt;</span>
        <span class="token punctuation">.</span><span class="token function">thenCompose</span><span class="token punctuation">(</span>message <span class="token operator">-&gt;</span> message<span class="token punctuation">.</span><span class="token function">addReaction</span><span class="token punctuation">(</span><span class="token string">&quot;\u{1F44D}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// CompletableFuture&lt;Void&gt;</span>
        <span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token class-name">ExceptionLogger</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// CompletableFuture&lt;Void&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="further-read" tabindex="-1"><a class="header-anchor" href="#further-read" aria-hidden="true">#</a> \u{1F4DA} Further Read</h2>`,6),E=n("This tutorial only focuses on the absolute basics. For a more detailed introduction to CompletableFutures, you can take a look at "),B={href:"https://www.callicoder.com/java-8-completablefuture-tutorial/",target:"_blank",rel:"noopener noreferrer"},R=n("this tutorial"),I=n("."),L=n("You should also take a look at the JavaDoc for a complete list of methods: "),V={href:"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html",target:"_blank",rel:"noopener noreferrer"},W=n("CompletableFuture JavaDoc"),D=n(".");function J(P,G){const p=e("RouterLink"),t=e("ExternalLinkIcon");return i(),u("div",null,[k,s("div",d,[m,s("p",null,[h,a(p,{to:"/wiki/essential-knowledge/lambdas/"},{default:l(()=>[v]),_:1}),g])]),s("p",null,[f,s("a",b,[w,a(t)]),y,s("a",_,[x,a(t)]),q]),T,s("p",null,[j,C,F,s("a",M,[S,a(t)]),A]),N,s("p",null,[E,s("a",B,[R,a(t)]),I]),s("p",null,[L,s("a",V,[W,a(t)]),D])])}var O=c(r,[["render",J],["__file","completable-futures.html.vue"]]);export{O as default};
